@startuml JsonModelDiagram

' Definição da hierarquia JSON
abstract class JsonValue {
  + {abstract} serialize(): String
  + {abstract} accept(v: JsonVisitor)
}

class JsonObject << (D,orchid) data >> {
  - properties: MutableMap<String, JsonValue>
  + get(key: String): JsonValue?
  + set(key: String, value: JsonValue)
  + size(): Int
  + values(): Collection<JsonValue>
  + keys(): Set<String>
  - getKeys(): Set<String>
  + times(other: JsonObject): JsonObject
  + filter(predicate: (String, JsonValue) -> Boolean): JsonObject
  + serialize(): String
  + accept(visitor: JsonVisitor)
}

class JsonArray << (D,orchid) data >> {
  - elements: MutableList<JsonValue>
  + add(value: JsonValue)
  + get(index: Int): JsonValue
  + set(index: Int, value: JsonValue)
  + size(): Int
  + elements(): List<JsonValue>
  + filter(predicate: (JsonValue) -> Boolean): JsonArray
  + map(transform: (JsonValue) -> JsonValue): JsonArray
  + serialize(): String
  + accept(visitor: JsonVisitor)
}

class JsonString << (D,orchid) data >> {
  - value: String
  + serialize(): String
  + accept(visitor: JsonVisitor)
}

class JsonNumber << (D,orchid) data >> {
  - value: Number
  + serialize(): String
  + accept(visitor: JsonVisitor)
}

class JsonBoolean << (D,orchid) data >> {
  - value: Boolean
  + serialize(): String
  + accept(visitor: JsonVisitor)
}

object JsonNull {
  + serialize(): String
  + accept(visitor: JsonVisitor)
}

' Visitor interface
interface JsonVisitor {
  + visitObject(obj: JsonObject)
  + visitArray(array: JsonArray)
  + visitString(str: JsonString)
  + visitNumber(num: JsonNumber)
  + visitBoolean(bool: JsonBoolean)
  + visitNull(jsonNull: JsonNull)
}

' Visitors concretos
class ValidatorVisitor {
  - valid: Boolean
  + isValid(): Boolean
  + visitObject(obj: JsonObject)
  + visitArray(array: JsonArray)
  + visitString(str: JsonString)
  + visitNumber(num: JsonNumber)
  + visitBoolean(bool: JsonBoolean)
  + visitNull(jsonNull: JsonNull)
}

class ArrayHomogeneityVisitor {
  - currentType: Class<*>
  - homogeneous: Boolean
  + isHomogeneous(): Boolean
  + visitArray(array: JsonArray)
  + visitObject(obj: JsonObject)
  + visitString(str: JsonString)
  + visitNumber(num: JsonNumber)
  + visitBoolean(bool: JsonBoolean)
  + visitNull(jsonNull: JsonNull)
}

' GetJson Framework
class GetJson {
  + {static} get(url: String): JsonValue
  + {static} get(url: String, params: Map<String, String>): JsonValue
}

class JsonInfer {
  + {static} inferType(json: JsonValue): String
}

' Annotations
annotation Mapping
annotation Param
annotation Path

' Relações de herança
JsonValue <|-- JsonObject
JsonValue <|-- JsonArray
JsonValue <|-- JsonString
JsonValue <|-- JsonNumber
JsonValue <|-- JsonBoolean
JsonValue <|-- JsonNull

' JsonVisitor associações (uso de dependency)
JsonVisitor ..> JsonObject
JsonVisitor ..> JsonArray
JsonVisitor ..> JsonString
JsonVisitor ..> JsonNumber
JsonVisitor ..> JsonBoolean
JsonVisitor ..> JsonNull

' Visitors implementam JsonVisitor
ValidatorVisitor ..|> JsonVisitor
ArrayHomogeneityVisitor ..|> JsonVisitor

' GetJson Framework dependencies
GetJson ..> JsonValue
JsonInfer ..> JsonValue

@enduml
